from make_gpt_request import make_gpt_request
from make_gigachat_request import make_gigachat_request
from scoring import calculate_scores

cool_prompt = """
–¢—ã --- —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º, –∫–æ—Ç–æ—Ä—ã–π –±–µ—Ä—ë—Ç –∏–Ω—Ç–µ—Ä–≤—å—é —Å —á–µ–ª–æ–≤–µ–∫–æ–º –∏ –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –Ω—ë–º, –ø–∏—à–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∞–Ω–∫–µ—Ç—É –¥–ª—è —Å–∞–π—Ç–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞. –≠—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–ª–æ—à–Ω–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∞–±–∑–∞—Ü–æ–≤, –æ—Ç 15 –¥–æ 75 —Å–ª–æ–≤. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–ª–∏—Ä—Ç, —é–º–æ—Ä –∏ —ç–º–æ–¥–∑–∏ –∏ –ø–∏—à–∏ –∫—Ä–∞—Å–∏–≤—ã–º —è–∑—ã–∫–æ–º. –ò–Ω—Ç–µ—Ä–≤—å—é:
"""
few_shot_prompt = """
–°–æ—Å—Ç–∞–≤—å –∞–Ω–∫–µ—Ç—É –ø–æ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–º—É –Ω–∏–∂–µ –∏–Ω—Ç–µ—Ä–≤—å—é. –í–æ—Ç –ø–∞—Ä—É —É–¥–∞—á–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤:
  –ò–Ω—Ç–µ—Ä–≤—å—é #1:
  - –ö–µ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å/–Ω–∞ –∫–æ–≥–æ —É—á–∏—à—å—Å—è?
  - –£—á—É—Å—å –≤ –ø–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –∫–æ–ª–ª–µ–¥–∂–µ –∏–º–µ–Ω–∏ –ù–∏–∫–æ–ª–∞—è –ù–∏–∫–æ–ª–∞–µ–≤–∏—á–∞ –ì–æ–¥–æ–≤–∏–∫–æ–≤–∞ –Ω–∞ –∞–≤–∏–∞—Ç–µ—Ö–Ω–∏–∫–∞
  - –ß–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?
  - –£—á—É—Å—å –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ª–µ—Ç–∞—Ç—å –Ω–∞ –º–æ—Ç–æ–ø–∞—Ä–∞–ø–ª–∞–Ω–µ, –ª—é–±–ª—é –æ–±–Ω–∏–º–∞—à–∫–∏, –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å, –∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ, —Å–æ—á–∏–Ω—è—Ç—å —Ö–æ–∫—É
  - –ó–∞—á–µ–º —Ç—ã –∑–¥–µ—Å—å, —á—Ç–æ –∏—â–µ—à—å?
  - –ò—â—É –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞, –æ—Ç–Ω–æ—à–µ–Ω–∏—è
  - –ö–∞–∫ –±—ã —Ç—ã –æ–ø–∏—Å–∞–ª —Å–µ–±—è —Ç—Ä–µ–º—è —Å–ª–æ–≤–∞–º–∏?
  - –¢–≤–æ—Ä—á–µ—Å–∫–∏–π, –∞–∫—Ç–∏–≤–Ω—ã–π, –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π
  - –ê–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –ø—Ä–æ —Ç–µ–±—è?
  - –í—ã–ø–æ–ª–Ω–∏–ª –Ω–∞ –º–æ—Ç–æ–ø–∞—Ä–∞–ø–ª–∞–Ω–µ 24 —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã—Ö –≤—ã–ª–µ—Ç–∞ –∏ –Ω–∞–ª–µ—Ç–∞–ª 4 —á–∞—Å–∞ 50 –º–∏–Ω—É—Ç
  –ê–Ω–∫–µ—Ç–∞ #1:
  –£—á—É—Å—å –Ω–∞ –∞–≤–∏–∞—Ç–µ—Ö–Ω–∏–∫–∞, –ø–æ—ç—Ç–æ–º—É –≤ –±—É–¥—É—â–µ–º —Å–æ–±–µ—Ä—É –¥–ª—è –Ω–∞—Å —á–∞—Å—Ç–Ω—ã–π —Å–∞–º–æ–ª—ë—Ç. –ê –ø–æ–∫–∞ –ª—é–±–ª—é –µ–∑–¥–∏—Ç—å –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ –∏ –ª–µ—Ç–∞—Ç—å –Ω–∞ –º–æ—Ç–æ–ø–∞—Ä–∞–ø–ª–∞–Ω–µ. –ï—Å–ª–∏ –Ω–∞–ø–∏—à–µ—à—å –º–Ω–µ, —Å–æ—á–∏–Ω—é –¥–ª—è —Ç–µ–±—è —Ö–æ–∫—Éüòâ.

  –ò–Ω—Ç–µ—Ä–≤—å—é #2:
  - –ö–µ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å/–Ω–∞ –∫–æ–≥–æ —É—á–∏—à—å—Å—è?
  - –§–æ—Ç–æ–≥—Ä–∞—Ñ
  - –ß–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?
  - –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, —é–º–æ—Ä, —Å—Ç–µ–Ω–¥–∞–ø
  - –ó–∞—á–µ–º —Ç—ã –∑–¥–µ—Å—å, —á—Ç–æ –∏—â–µ—à—å?
  - –ù—É–∂–µ–Ω —Ö–æ—Ä–æ—à–∏–π –¥—Ä—É–≥ –∏–ª–∏ –ø–æ–¥—Ä—É–≥–∞
  - –ö–∞–∫ –±—ã —Ç—ã –æ–ø–∏—Å–∞–ª —Å–µ–±—è —Ç—Ä–µ–º—è —Å–ª–æ–≤–∞–º–∏?
  - –Æ–º–æ—Ä–∏—Å—Ç, –ª—é–±–∏—Ç–µ–ª—å, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ
  - –ê–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –ø—Ä–æ —Ç–µ–±—è?
  - –ü—Ä–æ–±—É—é —Å–µ–±—è –≤ —Å—Ç–µ–Ω–¥–∞–ø–µ
  –ê–Ω–∫–µ—Ç–∞ #2:
  –£–º–µ—é –∫–ª–∞—Å—Å–Ω–æ —à—É—Ç–∏—Ç—å –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å, –ø–æ—ç—Ç–æ–º—É —Ä–∞—Å—á–∏—â–∞–π –º–µ—Å—Ç–æ –¥–ª—è —Ñ–æ—Ç–æ–∫, –≥–¥–µ —Ç—ã —É–ª—ã–±–∞–µ—à—å—Å—èüòÅ. –ù–∞–ø–∏—à–∏ –º–Ω–µ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –≤ –±—É–¥—É—â–µ–º —Å—Ç–∞—Ç—å –ø–æ–¥—Ä—É–≥–æ–π —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞–ø-–∫–æ–º–∏–∫–∞.

  –í–æ—Ç —Å–∞–º–æ –∏–Ω—Ç–µ—Ä–≤—å—é, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É:
*–ò–Ω—Ç–µ—Ä–≤—å—é*
"""
sysmes = ("–¢—ã --- —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º, –∫–æ—Ç–æ—Ä—ã–π –±–µ—Ä—ë—Ç –∏–Ω—Ç–µ—Ä–≤—å—é —Å —á–µ–ª–æ–≤–µ–∫–æ–º –∏ –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –Ω—ë–º, –ø–∏—à–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ "
          "—á–µ–ª–æ–≤–µ–∫–∞ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∞–Ω–∫–µ—Ç—É –¥–ª—è —Å–∞–π—Ç–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞. –≠—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "
          "—Å–ø–ª–æ—à–Ω–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∞–±–∑–∞—Ü–æ–≤, –æ—Ç 15 –¥–æ 75 —Å–ª–æ–≤.")


def gen_gpt_prompting(interview):
    return make_gpt_request(cool_prompt + interview)


def gen_gpt_few_shot(interview):
    return make_gpt_request(few_shot_prompt + interview)


def gen_gpt_fine_tuning(interview):
    return make_gpt_request(interview, system_message=sysmes,
                            model_name="ft:gpt-4o-mini-2024-07-18:personal:dating1:BH79i1o1")


def gen_gpt_fine_tuning_custom(interview):
    return make_gpt_request(interview, system_message=sysmes,
                            model_name="ft:gpt-4o-mini-2024-07-18:personal:dating1:BH82Ccte")


def gen_gigachat_prompting(interview):
    return make_gigachat_request(cool_prompt + interview)


def gen_gigachat_few_shot(interview):
    return make_gigachat_request(few_shot_prompt + interview)


import json
import random

'''
def parse_jsonl_and_extract_user_content(file_path):
    user_contents = []

    with open(file_path, 'r', encoding='utf-8') as file:
        for line in file:
            try:
                data = json.loads(line.strip())
                if "messages" in data:
                    for message in data["messages"]:
                        if message.get("role") == "user":
                            user_contents.append(message.get("content", ""))
            except json.JSONDecodeError as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∫–∏: {line}. –û—à–∏–±–∫–∞: {e}")

    return user_contents


file_path = "/content/dataset_ft_enhanced.jsonl"
user_contents = parse_jsonl_and_extract_user_content(file_path)
print(user_contents[0])'

test_df = [random.choice(user_contents) for _ in range(100)]

profiles1 = []
inter1 = []
profiles2 = []
inter2 = []
profiles3 = []
inter3 = []
profiles4 = []
inter4 = []
profiles5 = []
inter5 = []
profiles6 = []
inter6 = []

for interview in test_df:
    pr1 = gen_gpt_prompting(interview)
    pr2 = gen_gpt_few_shot(interview)
    pr3 = gen_gpt_fine_tuning(interview)
    pr4 = gen_gpt_fine_tuning_custom(interview)
    pr5 = gen_gigachat_prompting(interview)
    pr6 = gen_gigachat_few_shot(interview)
    profiles1.append(pr1)
    profiles2.append(pr2)
    profiles3.append(pr3)
    profiles4.append(pr4)
    profiles5.append(pr5)
    profiles6.append(pr6)

scores1 = calculate_scores(profiles1, test_df)
scores2 = calculate_scores(profiles2, test_df)
scores3 = calculate_scores(profiles3, test_df)
scores4 = calculate_scores(profiles4, test_df)
scores5 = calculate_scores(profiles5, test_df)
scores6 = calculate_scores(profiles6, test_df)
print(np.mean(scores1), np.mean(scores2), np.mean(scores3), np.mean(scores4), np.mean(scores5), np.mean(scores6))
'''